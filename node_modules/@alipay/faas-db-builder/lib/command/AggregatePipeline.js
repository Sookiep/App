"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.AggregatePipeline=void 0;const AggregateRequest_1=require("./AggregateRequest"),QueryRequest_1=require("./QueryRequest"),constant_1=require("../common/constant"),error_1=require("../common/error");class AggregatePipeline{#t;constructor(){this.#t=[]}match(e){return this.#e(constant_1.PipelineStageName.match,e),this}group(e){return this.#e(constant_1.PipelineStageName.group,e),this}sample(e){return this.#e(constant_1.PipelineStageName.sample,e),this}lookup(e){return this.#e(constant_1.PipelineStageName.lookup,e),this}done(){return this.#t.map(e=>{switch(e.name){case constant_1.PipelineStageName.match:return{$match:new QueryRequest_1.QueryRequest(e.param).toJSON()};case constant_1.PipelineStageName.sample:case constant_1.PipelineStageName.lookup:return{[e.name]:e.param};case constant_1.PipelineStageName.group:return{$group:new AggregateRequest_1.AggregateRequest(e.param).toJSON()};default:{const t=e.name;throw error_1.DbBuildError.invalidParam(t,"\u4E0D\u652F\u6301\u7684 aggregate \u64CD\u4F5C")}}})}#e(e,t){this.#t.push({name:e,param:t})}}exports.AggregatePipeline=AggregatePipeline;