import { HttpRequestFailedResult } from './types';
export declare enum ErrorCode {
    INVALID_PARAM = "INVALID_PARAM",
    CALL_FUNCTION_ERR = "CALL_FUNCTION_ERR",
    CALL_STORAGE_ERR = "CALL_STORAGE_ERR",
    CALL_DATABASE_ERR = "CALL_DATABASE_ERR",
    CALL_OPENAPI_ERR = "CALL_OPENAPI_ERR",
    SYS_ERR = "SYS_ERR",
    NOT_FOUND = "NOT_FOUND"
}
export declare class FunctionError extends Error {
    code: ErrorCode;
    requestId: string;
    errCode: number;
    get requestID(): string;
    get errMsg(): string;
    static create(code: ErrorCode, message: string, ...args: any[]): FunctionError;
    static createByHttpRequestFailedResult(code: ErrorCode, result: HttpRequestFailedResult): FunctionError;
}
export declare const errors: {
    INVALID_PARAM(paramName: string, message: string): FunctionError;
    CALL_FUNCTION_ERR(result: HttpRequestFailedResult): FunctionError;
    CALL_STORAGE_ERR(result: HttpRequestFailedResult): FunctionError;
    CALL_OPENAPI_ERR(result: HttpRequestFailedResult): FunctionError;
    CALL_DATABASE_ERR(result: HttpRequestFailedResult): FunctionError;
    SYS_ERR(message?: string): FunctionError;
    NOT_FOUND(message: string): FunctionError;
};
