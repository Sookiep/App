/// <reference types="node" />
/// <reference types="node" />
import type { Readable } from 'node:stream';
import type { RequestOptions } from 'urllib';
export type CloudInitOptions = {
    env?: string | symbol | {
        database?: string | symbol;
        functions?: string | symbol;
        storage?: string | symbol;
    };
    envId?: string;
    traceUser?: boolean;
};
export type GetDatabaseOptions = {
    env?: string | symbol;
};
export interface CallFunctionParam {
    name: string;
    data: object | string | number | boolean;
    config?: {
        env?: string | symbol;
    };
}
export interface CallFunctionResult<T = any> {
    requestID: string;
    result?: T;
}
export interface CallFunctionResponse {
    errCode: string;
    errMsg: string;
}
export interface CallDatabaseResponse<T = object> {
    success: boolean;
    code: number;
    message: string;
    trace_id: string;
    data: T;
}
export interface CallStorageResponse<T = object> {
    success: boolean;
    code: number;
    message: string;
    trace_id: string;
    data: T;
}
export interface CallOpenapiResponse<T = object> {
    code: string;
    message: string;
    requestId: string;
    result: T;
}
export interface HttpRequest {
    url: URL;
    requestOptions: RequestOptions;
}
export interface HttpRequestBaseResult {
    requestId: string;
    status: number;
    succeed: boolean;
}
export interface HttpRequestFailedResult extends HttpRequestBaseResult {
    succeed: false;
    errMsg: string;
    errCode: number;
}
export interface HttpRequestSuccessResult<T = object> extends HttpRequestBaseResult {
    succeed: true;
    data: T;
}
export type HttpRequestResult<T = object> = HttpRequestFailedResult | HttpRequestSuccessResult<T>;
export interface CollectionDescription {
    coll_id: number;
    coll_name: string;
    db_id: number;
    create_time: number;
}
export interface DeleteResult {
    count: number;
}
export interface UpdateResult {
    count: number;
}
export interface UploadFileParam {
    cloudPath: string;
    fileContent: Buffer | Readable;
}
export interface UploadFileResult {
    fileID: string;
    statusCode: number;
}
export interface DownloadFileParam {
    fileID: string;
}
export interface DownloadFileResult {
    fileContent: Buffer;
    statusCode: number;
}
export interface FileInfo {
    fileID: string;
    status: number;
    errMsg: string;
}
export interface TempFileInfo extends FileInfo {
    tempFileURL: string;
}
export interface DeleteFileResult {
    fileList: FileInfo[];
}
export interface GetTempFileURLResult {
    fileList: TempFileInfo[];
}
export interface CountDocumentResult {
    total: number;
}
export interface OpenapiConfig {
    version?: string;
}
